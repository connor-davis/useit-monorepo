// This file is auto-generated by @hey-api/openapi-ts

export type GetApiData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api';
};

export type GetApiResponses = {
  /**
   * 3rEco API index route.
   */
  200: string;
};

export type GetApiResponse = GetApiResponses[keyof GetApiResponses];

export type GetApiProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/profile';
};

export type GetApiProfileErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiProfileError = GetApiProfileErrors[keyof GetApiProfileErrors];

export type GetApiProfileResponses = {
  /**
   * The users profile.
   */
  200: {
    id: string;
    name: string;
    email: string;
    emailVerified: boolean;
    image: string;
    twoFactorEnabled: boolean;
    role: string;
    banned: boolean;
    banReason: string;
    banExpires?: unknown;
    createdAt: string;
    updatedAt: string;
    business?: {
      id: string;
      userId: string;
      type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
      description: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      zipCode: string;
      verified: boolean;
      createdAt: string;
      updatedAt: string;
    };
    collector?: {
      id: string;
      userId: string;
      idNumber: string;
      phoneNumber: string;
      address: string;
      city: string;
      province: string;
      zipCode: string;
      paymentName: string;
      paymentAccountHolder: string;
      paymentAccountNumber: string;
      createdAt: string;
      updatedAt: string;
    };
  };
};

export type GetApiProfileResponse =
  GetApiProfileResponses[keyof GetApiProfileResponses];

export type GetApiBusinessesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/businesses';
};

export type GetApiBusinessesResponses = {
  /**
   * The businesses list.
   */
  200: Array<{
    id: string;
    userId: string;
    type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
    description: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    verified: boolean;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiBusinessesResponse =
  GetApiBusinessesResponses[keyof GetApiBusinessesResponses];

export type PostApiBusinessesData = {
  /**
   * The new business's data payload.
   */
  body?: {
    userId: string;
    type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
    description: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    verified?: boolean;
  };
  path?: never;
  query?: never;
  url: '/api/businesses';
};

export type PostApiBusinessesErrors = {
  /**
   * The conflict error message.
   */
  409: {
    message: string;
  };
};

export type PostApiBusinessesError =
  PostApiBusinessesErrors[keyof PostApiBusinessesErrors];

export type PostApiBusinessesResponses = {
  /**
   * The new business's data payload.
   */
  201: {
    id: string;
    userId: string;
    type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
    description: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    verified: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostApiBusinessesResponse =
  PostApiBusinessesResponses[keyof PostApiBusinessesResponses];

export type DeleteApiBusinessesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/businesses/{id}';
};

export type DeleteApiBusinessesByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type DeleteApiBusinessesByIdError =
  DeleteApiBusinessesByIdErrors[keyof DeleteApiBusinessesByIdErrors];

export type DeleteApiBusinessesByIdResponses = {
  /**
   * The business was deleted.
   */
  200: string;
};

export type DeleteApiBusinessesByIdResponse =
  DeleteApiBusinessesByIdResponses[keyof DeleteApiBusinessesByIdResponses];

export type GetApiBusinessesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/businesses/{id}';
};

export type GetApiBusinessesByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiBusinessesByIdError =
  GetApiBusinessesByIdErrors[keyof GetApiBusinessesByIdErrors];

export type GetApiBusinessesByIdResponses = {
  /**
   * The business data payload.
   */
  200: {
    id: string;
    userId: string;
    type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
    description: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    verified: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiBusinessesByIdResponse =
  GetApiBusinessesByIdResponses[keyof GetApiBusinessesByIdResponses];

export type PatchApiBusinessesByIdData = {
  /**
   * The updated business's data payload.
   */
  body?: {
    id?: string;
    userId?: string;
    type?: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
    description?: string;
    phoneNumber?: string;
    address?: string;
    city?: string;
    province?: string;
    zipCode?: string;
    verified?: boolean;
    createdAt?: string;
    updatedAt?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/businesses/{id}';
};

export type PatchApiBusinessesByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type PatchApiBusinessesByIdError =
  PatchApiBusinessesByIdErrors[keyof PatchApiBusinessesByIdErrors];

export type PatchApiBusinessesByIdResponses = {
  /**
   * The updated business's data payload.
   */
  200: {
    id: string;
    userId: string;
    type: 'Recycler' | 'Waste Collector' | 'Buy Back Centre';
    description: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    verified: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type PatchApiBusinessesByIdResponse =
  PatchApiBusinessesByIdResponses[keyof PatchApiBusinessesByIdResponses];

export type GetApiCollectorsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/collectors';
};

export type GetApiCollectorsResponses = {
  /**
   * The collectors list.
   */
  200: Array<{
    id: string;
    userId: string;
    idNumber: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    paymentName: string;
    paymentAccountHolder: string;
    paymentAccountNumber: string;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiCollectorsResponse =
  GetApiCollectorsResponses[keyof GetApiCollectorsResponses];

export type PostApiCollectorsData = {
  /**
   * The new collector's data payload.
   */
  body?: {
    userId: string;
    idNumber: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    paymentName: string;
    paymentAccountHolder: string;
    paymentAccountNumber: string;
  };
  path?: never;
  query?: never;
  url: '/api/collectors';
};

export type PostApiCollectorsErrors = {
  /**
   * The conflict error message.
   */
  409: {
    message: string;
  };
};

export type PostApiCollectorsError =
  PostApiCollectorsErrors[keyof PostApiCollectorsErrors];

export type PostApiCollectorsResponses = {
  /**
   * The new collector's data payload.
   */
  201: {
    id: string;
    userId: string;
    idNumber: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    paymentName: string;
    paymentAccountHolder: string;
    paymentAccountNumber: string;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostApiCollectorsResponse =
  PostApiCollectorsResponses[keyof PostApiCollectorsResponses];

export type DeleteApiCollectorsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/collectors/{id}';
};

export type DeleteApiCollectorsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type DeleteApiCollectorsByIdError =
  DeleteApiCollectorsByIdErrors[keyof DeleteApiCollectorsByIdErrors];

export type DeleteApiCollectorsByIdResponses = {
  /**
   * The collector was deleted.
   */
  200: string;
};

export type DeleteApiCollectorsByIdResponse =
  DeleteApiCollectorsByIdResponses[keyof DeleteApiCollectorsByIdResponses];

export type GetApiCollectorsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/collectors/{id}';
};

export type GetApiCollectorsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiCollectorsByIdError =
  GetApiCollectorsByIdErrors[keyof GetApiCollectorsByIdErrors];

export type GetApiCollectorsByIdResponses = {
  /**
   * The collector data payload.
   */
  200: {
    id: string;
    userId: string;
    idNumber: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    paymentName: string;
    paymentAccountHolder: string;
    paymentAccountNumber: string;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiCollectorsByIdResponse =
  GetApiCollectorsByIdResponses[keyof GetApiCollectorsByIdResponses];

export type PatchApiCollectorsByIdData = {
  /**
   * The updated collector's data payload.
   */
  body?: {
    id?: string;
    userId?: string;
    idNumber?: string;
    phoneNumber?: string;
    address?: string;
    city?: string;
    province?: string;
    zipCode?: string;
    paymentName?: string;
    paymentAccountHolder?: string;
    paymentAccountNumber?: string;
    createdAt?: string;
    updatedAt?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/collectors/{id}';
};

export type PatchApiCollectorsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type PatchApiCollectorsByIdError =
  PatchApiCollectorsByIdErrors[keyof PatchApiCollectorsByIdErrors];

export type PatchApiCollectorsByIdResponses = {
  /**
   * The updated collector's data payload.
   */
  200: {
    id: string;
    userId: string;
    idNumber: string;
    phoneNumber: string;
    address: string;
    city: string;
    province: string;
    zipCode: string;
    paymentName: string;
    paymentAccountHolder: string;
    paymentAccountNumber: string;
    createdAt: string;
    updatedAt: string;
  };
};

export type PatchApiCollectorsByIdResponse =
  PatchApiCollectorsByIdResponses[keyof PatchApiCollectorsByIdResponses];

export type GetApiMaterialsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/materials';
};

export type GetApiMaterialsResponses = {
  /**
   * The materials list.
   */
  200: Array<{
    id: string;
    name: string;
    description: string;
    gwCode: string;
    carbonFactor: string;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiMaterialsResponse =
  GetApiMaterialsResponses[keyof GetApiMaterialsResponses];

export type PostApiMaterialsData = {
  /**
   * The new material's data payload.
   */
  body?: {
    name: string;
    description: string;
    gwCode: string;
    carbonFactor: string;
  };
  path?: never;
  query?: never;
  url: '/api/materials';
};

export type PostApiMaterialsResponses = {
  /**
   * The new material's data payload.
   */
  201: {
    id: string;
    name: string;
    description: string;
    gwCode: string;
    carbonFactor: string;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostApiMaterialsResponse =
  PostApiMaterialsResponses[keyof PostApiMaterialsResponses];

export type DeleteApiMaterialsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/materials/{id}';
};

export type DeleteApiMaterialsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type DeleteApiMaterialsByIdError =
  DeleteApiMaterialsByIdErrors[keyof DeleteApiMaterialsByIdErrors];

export type DeleteApiMaterialsByIdResponses = {
  /**
   * The material was deleted.
   */
  200: string;
};

export type DeleteApiMaterialsByIdResponse =
  DeleteApiMaterialsByIdResponses[keyof DeleteApiMaterialsByIdResponses];

export type GetApiMaterialsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/materials/{id}';
};

export type GetApiMaterialsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiMaterialsByIdError =
  GetApiMaterialsByIdErrors[keyof GetApiMaterialsByIdErrors];

export type GetApiMaterialsByIdResponses = {
  /**
   * The material's data payload.
   */
  200: {
    id: string;
    name: string;
    description: string;
    gwCode: string;
    carbonFactor: string;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiMaterialsByIdResponse =
  GetApiMaterialsByIdResponses[keyof GetApiMaterialsByIdResponses];

export type PatchApiMaterialsByIdData = {
  /**
   * The updated material's data payload.
   */
  body?: {
    id?: string;
    name?: string;
    description?: string;
    gwCode?: string;
    carbonFactor?: string;
    createdAt?: string;
    updatedAt?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/materials/{id}';
};

export type PatchApiMaterialsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type PatchApiMaterialsByIdError =
  PatchApiMaterialsByIdErrors[keyof PatchApiMaterialsByIdErrors];

export type PatchApiMaterialsByIdResponses = {
  /**
   * The updated material's data payload.
   */
  200: {
    id: string;
    name: string;
    description: string;
    gwCode: string;
    carbonFactor: string;
    createdAt: string;
    updatedAt: string;
  };
};

export type PatchApiMaterialsByIdResponse =
  PatchApiMaterialsByIdResponses[keyof PatchApiMaterialsByIdResponses];

export type GetApiProductsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/products';
};

export type GetApiProductsResponses = {
  /**
   * The product list.
   */
  200: Array<{
    id: string;
    materialId: string;
    businessId: string;
    value?: unknown;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiProductsResponse =
  GetApiProductsResponses[keyof GetApiProductsResponses];

export type PostApiProductsData = {
  /**
   * The new product's data payload.
   */
  body?: {
    materialId: string;
    businessId: string;
    value?: unknown;
  };
  path?: never;
  query?: never;
  url: '/api/products';
};

export type PostApiProductsErrors = {
  /**
   * The conflict error message.
   */
  409: {
    message: string;
  };
};

export type PostApiProductsError =
  PostApiProductsErrors[keyof PostApiProductsErrors];

export type PostApiProductsResponses = {
  /**
   * The new product's data payload.
   */
  201: {
    id: string;
    materialId: string;
    businessId: string;
    value?: unknown;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostApiProductsResponse =
  PostApiProductsResponses[keyof PostApiProductsResponses];

export type DeleteApiProductsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/products/{id}';
};

export type DeleteApiProductsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type DeleteApiProductsByIdError =
  DeleteApiProductsByIdErrors[keyof DeleteApiProductsByIdErrors];

export type DeleteApiProductsByIdResponses = {
  /**
   * The product was deleted.
   */
  200: string;
};

export type DeleteApiProductsByIdResponse =
  DeleteApiProductsByIdResponses[keyof DeleteApiProductsByIdResponses];

export type GetApiProductsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/products/{id}';
};

export type GetApiProductsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiProductsByIdError =
  GetApiProductsByIdErrors[keyof GetApiProductsByIdErrors];

export type GetApiProductsByIdResponses = {
  /**
   * The product's data payload.
   */
  200: {
    id: string;
    materialId: string;
    businessId: string;
    value?: unknown;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiProductsByIdResponse =
  GetApiProductsByIdResponses[keyof GetApiProductsByIdResponses];

export type PatchApiProductsByIdData = {
  /**
   * The updated products's data payload.
   */
  body?: {
    id?: string;
    materialId?: string;
    businessId?: string;
    value?: unknown;
    createdAt?: string;
    updatedAt?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/products/{id}';
};

export type PatchApiProductsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
  /**
   * The conflict error message.
   */
  409: {
    message: string;
  };
};

export type PatchApiProductsByIdError =
  PatchApiProductsByIdErrors[keyof PatchApiProductsByIdErrors];

export type PatchApiProductsByIdResponses = {
  /**
   * The updated product's data payload.
   */
  200: {
    id: string;
    materialId: string;
    businessId: string;
    value?: unknown;
    createdAt: string;
    updatedAt: string;
  };
};

export type PatchApiProductsByIdResponse =
  PatchApiProductsByIdResponses[keyof PatchApiProductsByIdResponses];

export type GetApiTransactionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/transactions';
};

export type GetApiTransactionsResponses = {
  /**
   * The transactions list.
   */
  200: Array<{
    id: string;
    buyerId: string;
    sellerId: string;
    materialId: string;
    productId: string;
    type: 'collection' | 'transfer';
    weight?: unknown;
    amount?: unknown;
    sellerAccepted: boolean;
    sellerDeclined: boolean;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiTransactionsResponse =
  GetApiTransactionsResponses[keyof GetApiTransactionsResponses];

export type PostApiTransactionsData = {
  /**
   * The new transactions's data payload.
   */
  body?: {
    buyerId: string;
    sellerId: string;
    materialId: string;
    productId: string;
    type: 'collection' | 'transfer';
    weight?: unknown;
    amount?: unknown;
    sellerAccepted?: boolean;
    sellerDeclined?: boolean;
  };
  path?: never;
  query?: never;
  url: '/api/transactions';
};

export type PostApiTransactionsResponses = {
  /**
   * The new transactions's data payload.
   */
  201: {
    id: string;
    buyerId: string;
    sellerId: string;
    materialId: string;
    productId: string;
    type: 'collection' | 'transfer';
    weight?: unknown;
    amount?: unknown;
    sellerAccepted: boolean;
    sellerDeclined: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type PostApiTransactionsResponse =
  PostApiTransactionsResponses[keyof PostApiTransactionsResponses];

export type GetApiTransactionsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/transactions/{id}';
};

export type GetApiTransactionsByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiTransactionsByIdError =
  GetApiTransactionsByIdErrors[keyof GetApiTransactionsByIdErrors];

export type GetApiTransactionsByIdResponses = {
  /**
   * The transaction's data payload.
   */
  200: {
    id: string;
    buyerId: string;
    sellerId: string;
    materialId: string;
    productId: string;
    type: 'collection' | 'transfer';
    weight?: unknown;
    amount?: unknown;
    sellerAccepted: boolean;
    sellerDeclined: boolean;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiTransactionsByIdResponse =
  GetApiTransactionsByIdResponses[keyof GetApiTransactionsByIdResponses];

export type PatchApiTransactionsAcceptByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/transactions/accept/{id}';
};

export type PatchApiTransactionsAcceptByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
  /**
   * The conflict error message.
   */
  409: {
    message: string;
  };
};

export type PatchApiTransactionsAcceptByIdError =
  PatchApiTransactionsAcceptByIdErrors[keyof PatchApiTransactionsAcceptByIdErrors];

export type PatchApiTransactionsAcceptByIdResponses = {
  /**
   * The transaction was accepted.
   */
  200: string;
};

export type PatchApiTransactionsAcceptByIdResponse =
  PatchApiTransactionsAcceptByIdResponses[keyof PatchApiTransactionsAcceptByIdResponses];

export type PatchApiTransactionsDeclineByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/transactions/decline/{id}';
};

export type PatchApiTransactionsDeclineByIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
  /**
   * The conflict error message.
   */
  409: {
    message: string;
  };
};

export type PatchApiTransactionsDeclineByIdError =
  PatchApiTransactionsDeclineByIdErrors[keyof PatchApiTransactionsDeclineByIdErrors];

export type PatchApiTransactionsDeclineByIdResponses = {
  /**
   * The transaction was declined.
   */
  200: string;
};

export type PatchApiTransactionsDeclineByIdResponse =
  PatchApiTransactionsDeclineByIdResponses[keyof PatchApiTransactionsDeclineByIdResponses];

export type GetApiStockData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/stock';
};

export type GetApiStockResponses = {
  /**
   * The stock list.
   */
  200: Array<{
    id: string;
    businessId: string;
    productId: string;
    weight?: unknown;
    createdAt: string;
    updatedAt: string;
  }>;
};

export type GetApiStockResponse =
  GetApiStockResponses[keyof GetApiStockResponses];

export type GetApiStockProductByProductIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/stock/product/{productId}';
};

export type GetApiStockProductByProductIdErrors = {
  /**
   * The not-found error message.
   */
  404: {
    message: string;
  };
};

export type GetApiStockProductByProductIdError =
  GetApiStockProductByProductIdErrors[keyof GetApiStockProductByProductIdErrors];

export type GetApiStockProductByProductIdResponses = {
  /**
   * The stock data payload.
   */
  200: {
    id: string;
    businessId: string;
    productId: string;
    weight?: unknown;
    createdAt: string;
    updatedAt: string;
  };
};

export type GetApiStockProductByProductIdResponse =
  GetApiStockProductByProductIdResponses[keyof GetApiStockProductByProductIdResponses];

export type PatchApiOnboardingSetRoleByRoleData = {
  body?: never;
  path: {
    role: 'business' | 'collector' | 'user';
  };
  query?: never;
  url: '/api/onboarding/set-role/{role}';
};

export type PatchApiOnboardingSetRoleByRoleResponses = {
  /**
   * The role was set.
   */
  200: string;
};

export type PatchApiOnboardingSetRoleByRoleResponse =
  PatchApiOnboardingSetRoleByRoleResponses[keyof PatchApiOnboardingSetRoleByRoleResponses];

export type ClientOptions = {
  baseUrl:
    | 'http://localhost:6173'
    | 'https://3reco.lone-wolf.dev'
    | (string & {});
};

// This file is auto-generated by @hey-api/openapi-ts
import {
  type DefaultError,
  type UseMutationOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  deleteApiBusinessesById,
  deleteApiCollectorsById,
  deleteApiMaterialsById,
  deleteApiProductsById,
  getApi,
  getApiBusinesses,
  getApiBusinessesById,
  getApiCollectors,
  getApiCollectorsById,
  getApiMaterials,
  getApiMaterialsById,
  getApiProducts,
  getApiProductsById,
  getApiProfile,
  getApiStock,
  getApiStockProductByProductId,
  getApiTransactions,
  getApiTransactionsById,
  patchApiBusinessesById,
  patchApiCollectorsById,
  patchApiMaterialsById,
  patchApiOnboardingSetRoleByRole,
  patchApiProductsById,
  patchApiTransactionsAcceptById,
  patchApiTransactionsDeclineById,
  postApiBusinesses,
  postApiCollectors,
  postApiMaterials,
  postApiProducts,
  postApiTransactions,
} from '../sdk.gen';
import type {
  DeleteApiBusinessesByIdData,
  DeleteApiBusinessesByIdError,
  DeleteApiBusinessesByIdResponse,
  DeleteApiCollectorsByIdData,
  DeleteApiCollectorsByIdError,
  DeleteApiCollectorsByIdResponse,
  DeleteApiMaterialsByIdData,
  DeleteApiMaterialsByIdError,
  DeleteApiMaterialsByIdResponse,
  DeleteApiProductsByIdData,
  DeleteApiProductsByIdError,
  DeleteApiProductsByIdResponse,
  GetApiBusinessesByIdData,
  GetApiBusinessesData,
  GetApiCollectorsByIdData,
  GetApiCollectorsData,
  GetApiData,
  GetApiMaterialsByIdData,
  GetApiMaterialsData,
  GetApiProductsByIdData,
  GetApiProductsData,
  GetApiProfileData,
  GetApiStockData,
  GetApiStockProductByProductIdData,
  GetApiTransactionsByIdData,
  GetApiTransactionsData,
  PatchApiBusinessesByIdData,
  PatchApiBusinessesByIdError,
  PatchApiBusinessesByIdResponse,
  PatchApiCollectorsByIdData,
  PatchApiCollectorsByIdError,
  PatchApiCollectorsByIdResponse,
  PatchApiMaterialsByIdData,
  PatchApiMaterialsByIdError,
  PatchApiMaterialsByIdResponse,
  PatchApiOnboardingSetRoleByRoleData,
  PatchApiOnboardingSetRoleByRoleResponse,
  PatchApiProductsByIdData,
  PatchApiProductsByIdError,
  PatchApiProductsByIdResponse,
  PatchApiTransactionsAcceptByIdData,
  PatchApiTransactionsAcceptByIdError,
  PatchApiTransactionsAcceptByIdResponse,
  PatchApiTransactionsDeclineByIdData,
  PatchApiTransactionsDeclineByIdError,
  PatchApiTransactionsDeclineByIdResponse,
  PostApiBusinessesData,
  PostApiBusinessesError,
  PostApiBusinessesResponse,
  PostApiCollectorsData,
  PostApiCollectorsError,
  PostApiCollectorsResponse,
  PostApiMaterialsData,
  PostApiMaterialsResponse,
  PostApiProductsData,
  PostApiProductsError,
  PostApiProductsResponse,
  PostApiTransactionsData,
  PostApiTransactionsResponse,
} from '../types.gen';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getApiQueryKey = (options?: Options<GetApiData>) => [
  createQueryKey('getApi', options),
];

export const getApiOptions = (options?: Options<GetApiData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApi({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiQueryKey(options),
  });
};

export const getApiProfileQueryKey = (options?: Options<GetApiProfileData>) => [
  createQueryKey('getApiProfile', options),
];

export const getApiProfileOptions = (options?: Options<GetApiProfileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProfileQueryKey(options),
  });
};

export const getApiBusinessesQueryKey = (
  options?: Options<GetApiBusinessesData>
) => [createQueryKey('getApiBusinesses', options)];

export const getApiBusinessesOptions = (
  options?: Options<GetApiBusinessesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBusinesses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBusinessesQueryKey(options),
  });
};

export const postApiBusinessesQueryKey = (
  options?: Options<PostApiBusinessesData>
) => [createQueryKey('postApiBusinesses', options)];

export const postApiBusinessesOptions = (
  options?: Options<PostApiBusinessesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBusinesses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiBusinessesQueryKey(options),
  });
};

export const postApiBusinessesMutation = (
  options?: Partial<Options<PostApiBusinessesData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostApiBusinessesResponse,
    PostApiBusinessesError,
    Options<PostApiBusinessesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBusinesses({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiBusinessesByIdMutation = (
  options?: Partial<Options<DeleteApiBusinessesByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteApiBusinessesByIdResponse,
    DeleteApiBusinessesByIdError,
    Options<DeleteApiBusinessesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiBusinessesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBusinessesByIdQueryKey = (
  options: Options<GetApiBusinessesByIdData>
) => [createQueryKey('getApiBusinessesById', options)];

export const getApiBusinessesByIdOptions = (
  options: Options<GetApiBusinessesByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBusinessesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBusinessesByIdQueryKey(options),
  });
};

export const patchApiBusinessesByIdMutation = (
  options?: Partial<Options<PatchApiBusinessesByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiBusinessesByIdResponse,
    PatchApiBusinessesByIdError,
    Options<PatchApiBusinessesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiBusinessesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectorsQueryKey = (
  options?: Options<GetApiCollectorsData>
) => [createQueryKey('getApiCollectors', options)];

export const getApiCollectorsOptions = (
  options?: Options<GetApiCollectorsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectorsQueryKey(options),
  });
};

export const postApiCollectorsQueryKey = (
  options?: Options<PostApiCollectorsData>
) => [createQueryKey('postApiCollectors', options)];

export const postApiCollectorsOptions = (
  options?: Options<PostApiCollectorsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiCollectors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiCollectorsQueryKey(options),
  });
};

export const postApiCollectorsMutation = (
  options?: Partial<Options<PostApiCollectorsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostApiCollectorsResponse,
    PostApiCollectorsError,
    Options<PostApiCollectorsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiCollectors({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiCollectorsByIdMutation = (
  options?: Partial<Options<DeleteApiCollectorsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteApiCollectorsByIdResponse,
    DeleteApiCollectorsByIdError,
    Options<DeleteApiCollectorsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiCollectorsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectorsByIdQueryKey = (
  options: Options<GetApiCollectorsByIdData>
) => [createQueryKey('getApiCollectorsById', options)];

export const getApiCollectorsByIdOptions = (
  options: Options<GetApiCollectorsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectorsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectorsByIdQueryKey(options),
  });
};

export const patchApiCollectorsByIdMutation = (
  options?: Partial<Options<PatchApiCollectorsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiCollectorsByIdResponse,
    PatchApiCollectorsByIdError,
    Options<PatchApiCollectorsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiCollectorsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsQueryKey = (
  options?: Options<GetApiMaterialsData>
) => [createQueryKey('getApiMaterials', options)];

export const getApiMaterialsOptions = (
  options?: Options<GetApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsQueryKey(options),
  });
};

export const postApiMaterialsQueryKey = (
  options?: Options<PostApiMaterialsData>
) => [createQueryKey('postApiMaterials', options)];

export const postApiMaterialsOptions = (
  options?: Options<PostApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiMaterialsQueryKey(options),
  });
};

export const postApiMaterialsMutation = (
  options?: Partial<Options<PostApiMaterialsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostApiMaterialsResponse,
    DefaultError,
    Options<PostApiMaterialsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiMaterials({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiMaterialsByIdMutation = (
  options?: Partial<Options<DeleteApiMaterialsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteApiMaterialsByIdResponse,
    DeleteApiMaterialsByIdError,
    Options<DeleteApiMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsByIdQueryKey = (
  options: Options<GetApiMaterialsByIdData>
) => [createQueryKey('getApiMaterialsById', options)];

export const getApiMaterialsByIdOptions = (
  options: Options<GetApiMaterialsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterialsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsByIdQueryKey(options),
  });
};

export const patchApiMaterialsByIdMutation = (
  options?: Partial<Options<PatchApiMaterialsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiMaterialsByIdResponse,
    PatchApiMaterialsByIdError,
    Options<PatchApiMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProductsQueryKey = (
  options?: Options<GetApiProductsData>
) => [createQueryKey('getApiProducts', options)];

export const getApiProductsOptions = (
  options?: Options<GetApiProductsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProductsQueryKey(options),
  });
};

export const postApiProductsQueryKey = (
  options?: Options<PostApiProductsData>
) => [createQueryKey('postApiProducts', options)];

export const postApiProductsOptions = (
  options?: Options<PostApiProductsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiProductsQueryKey(options),
  });
};

export const postApiProductsMutation = (
  options?: Partial<Options<PostApiProductsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostApiProductsResponse,
    PostApiProductsError,
    Options<PostApiProductsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiProducts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiProductsByIdMutation = (
  options?: Partial<Options<DeleteApiProductsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    DeleteApiProductsByIdResponse,
    DeleteApiProductsByIdError,
    Options<DeleteApiProductsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiProductsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProductsByIdQueryKey = (
  options: Options<GetApiProductsByIdData>
) => [createQueryKey('getApiProductsById', options)];

export const getApiProductsByIdOptions = (
  options: Options<GetApiProductsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProductsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProductsByIdQueryKey(options),
  });
};

export const patchApiProductsByIdMutation = (
  options?: Partial<Options<PatchApiProductsByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiProductsByIdResponse,
    PatchApiProductsByIdError,
    Options<PatchApiProductsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiProductsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsQueryKey = (
  options?: Options<GetApiTransactionsData>
) => [createQueryKey('getApiTransactions', options)];

export const getApiTransactionsOptions = (
  options?: Options<GetApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsQueryKey(options),
  });
};

export const postApiTransactionsQueryKey = (
  options?: Options<PostApiTransactionsData>
) => [createQueryKey('postApiTransactions', options)];

export const postApiTransactionsOptions = (
  options?: Options<PostApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTransactionsQueryKey(options),
  });
};

export const postApiTransactionsMutation = (
  options?: Partial<Options<PostApiTransactionsData>>
) => {
  const mutationOptions: UseMutationOptions<
    PostApiTransactionsResponse,
    DefaultError,
    Options<PostApiTransactionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTransactions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsByIdQueryKey = (
  options: Options<GetApiTransactionsByIdData>
) => [createQueryKey('getApiTransactionsById', options)];

export const getApiTransactionsByIdOptions = (
  options: Options<GetApiTransactionsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsByIdQueryKey(options),
  });
};

export const patchApiTransactionsAcceptByIdMutation = (
  options?: Partial<Options<PatchApiTransactionsAcceptByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiTransactionsAcceptByIdResponse,
    PatchApiTransactionsAcceptByIdError,
    Options<PatchApiTransactionsAcceptByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiTransactionsAcceptById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchApiTransactionsDeclineByIdMutation = (
  options?: Partial<Options<PatchApiTransactionsDeclineByIdData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiTransactionsDeclineByIdResponse,
    PatchApiTransactionsDeclineByIdError,
    Options<PatchApiTransactionsDeclineByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiTransactionsDeclineById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiStockQueryKey = (options?: Options<GetApiStockData>) => [
  createQueryKey('getApiStock', options),
];

export const getApiStockOptions = (options?: Options<GetApiStockData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiStock({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiStockQueryKey(options),
  });
};

export const getApiStockProductByProductIdQueryKey = (
  options: Options<GetApiStockProductByProductIdData>
) => [createQueryKey('getApiStockProductByProductId', options)];

export const getApiStockProductByProductIdOptions = (
  options: Options<GetApiStockProductByProductIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiStockProductByProductId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiStockProductByProductIdQueryKey(options),
  });
};

export const patchApiOnboardingSetRoleByRoleMutation = (
  options?: Partial<Options<PatchApiOnboardingSetRoleByRoleData>>
) => {
  const mutationOptions: UseMutationOptions<
    PatchApiOnboardingSetRoleByRoleResponse,
    DefaultError,
    Options<PatchApiOnboardingSetRoleByRoleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiOnboardingSetRoleByRole({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
